.\"Crystal Programming Language
.Dd March 7, 2016
.Dt CRYSTAL(1) "" "Crystal Compiler Command Line Reference Guide"
.\".Dt CRYSTAL 1
.Os UNIX
.Sh NAME
.Nm crystal - Compiler for the Crystal language.
.Sh SYNOPSYS
.Nm
.Op command
.Op switches
.Op program file
.Op --
.Op arguments
.Sh DESCRIPTION
Crystal is a statically type-checked programming language. It was created with the beauty of ruby and the performance of pure C in mind.
.Sh USAGE
You can compile and run a program by invoking the compiler with a single filename:
.Bd -offset indent-two
.Nm
.Ar some_program.cr
.Ed

Crystal files usually end with the .cr extension.

Alternatively you can use the run command:
.Bd -offset indent-two
.Nm
run
.Ar some_program.cr
.Ed

To create an executable use the build command:
.Bd -offset indent-two
.Nm
build
.Ar some_program.cr
.Ed

This will create an executable named "some_program".

Note that by default the generated executables are not fully optimized.
To turn optimizations on, use the --release flag:
.Bd -offset indent-two
.Nm
.Fl -release
build
.Ar some_program.cr
.Ed

Make sure to always use --release for production-ready executables and when performing benchmarks.

The reason for this is that performance without full optimizations is still pretty good and provides fast compile times, so you can use the crystal command almost as if it were an interpreter.


.Bl -tag -width "12345678" -compact
.Pp
.Sh OPTIONS
The crystal command accepts the following options 

.Bl -tag -width "12345678" -compact
.Pp
.It 
.Cm init
.Ar TYPE
.Ar NAME
.Op DIR
.Pp
Generate a new project.
.Pp
TYPE is one of:
.Bl -tag -width "12345678" -compact
.Pp
.It Sy lib
Creates a library skeleton
.It Sy app
Creates an application skeleton
.El
.Bd -literal -offset
NAME - name of project to be generated,
eg: example
.Pp
DIR  - directory where project will be generated,
default: NAME
.Ed

.Pp
.It
.Cm build
.Op options
.Op programfile
.Op --
.Op arguments
.Pp
Compile program.
.Pp
Options:
.Bl -tag -width "12345678" -compact
.Pp
.It Fl -cross-compile
Generate object files for cross compilation and prints the command to build the executable.
.It Fl -d, Fl -debug
Generate the output with symbolic debug info.
.It Fl D FLAG, -define FLAG
Define a compile-time flag.
.It Fl -emit [asm|llvm-bc|llvm-ir|obj]
Comma separated list of types of output for the compiler to emit, e.g, obj emits a .o object file.
.It Fl f text|json, -format text|json
Format of output. Defaults to text.
.It Fl -ll
Dump ll to output directory.
.It Fl -link-flags FLAGS
Additional flags to pass to the linker.
.It Fl -mcpu CPU
Specify the name of the processor.
.It Fl -no-color
Disable colored output.
.It Fl -no-codegen
Don't do code generation, just parse the file.
.It Fl o
Specify filename of output.
.It Fl -prelude
Use given file as prelude.
.It Fl -release
Generate optimized output.
.It Fl s, -stats
Print runtime statistics about the different compiler stages.
.It Fl -single-module
Generate a single LLVM module.
.It Fl -threads
Maximum number of threads to use.
.It Fl -target TRIPLE
Enable target triple.
.It Fl -verbose
Display executed commands.
.El

.Pp
.It
.Cm deps
.Op options
.Ar <command>
.Pp
Alias for shards, the dependency manager for Crystal language.
.Pp
.It
.Cm docs
.Pp
Generate documentation from comments using a subset of markdown. The output is saved in html format on the created doc/ folder. More information about documentation conventions can be found at https://crystal-lang.org/docs/conventions/documenting_code.html.
.Pp
.It Cm eval
.Pp
Eval code from args or standard input.
.Pp
.It
.Cm play
.Op options
.Pp
Starts the crystal playground server.
.Pp
Options:
.Bl -tag -width "12345678" -compact
.Pp
.It Fl p Fl -port
Run the playground on the specified port. Default is 8080.
.It Fl b Ar HOST Fl -binding Ar HOST
Bind the playground to the specified IP.
.It Fl v Fl -verbose
Display detailed information of the executed code.
.It Fl h Fl -help
Show a help message about play command options.
.El
.Pp
.It
.Cm run
.Op options
.Op programfile
.Op Fl -
.Op arguments
.Pp
The default command. Compile and run program.
.Pp
Options:
Same as the build options.
.Pp
.It
.Cm spec
.Pp
Compile and run specs (in spec directory).
.Pp
.It
.Cm tool
.Op tool
.Op switches
.Ar program file
.Op Fl -
.Op arguments
.Pp
Run a tool.
.Pp
Tools:
.Bl -tag -offset indent
.It Cm context
Show context for given location.
.It Cm format
Format project, directories and/or files with the coding style used in the standard library. You can use the
.Fl -check
flag to check whether the formatter would make any changes.
.It Cm hierarchy
Show hierarchy of types from file. Also show class and struct members, with type and size. Types can be filtered with a regex by using the
.Fl e
flag.
.It Cm implementations
Show implementations for a given call. Use
.Fl -cursor
to specify the cursor position. The format for the cursor position is file:line:column.
.It Cm types
Show type of main variables of file.
.El
.Pp
.It Cm version, Fl -version, v
.Pp
Show version.
.El
.Sh SEE ALSO
.Fn shards 1
.Bl -hang -compact -width "https://github.com/crystal-lang/crystal/1234"
.It https://crystal-lang.org/
The official web site.
.It https://github.com/crystal-lang/crystal
Official Repository.
.El
