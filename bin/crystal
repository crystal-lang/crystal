#!/usr/bin/env bash
SCRIPT_ROOT="$(dirname $(readlink $0 || echo $0))/.."
DEPS_DIR="$SCRIPT_ROOT/deps"

CRYSTAL_DIR="$SCRIPT_ROOT/.build"
[ -x $CRYSTAL_DIR/crystal ] || CRYSTAL_DIR=$DEPS_DIR

OS_NAME=`uname -s`
HW_NAME=`uname -m`
EXTRACT_FLAG="z"

case $OS_NAME in
  Darwin)
    LLVM_URL="http://llvm.org/releases/3.3/clang+llvm-3.3-x86_64-apple-darwin12.tar.gz"
    CRYSTAL_URL="https://s3.amazonaws.com/crystal-lang/crystal-darwin-latest.gz"
    ;;

  Linux)
    case $HW_NAME in
      x86_64)
        LLVM_URL="http://llvm.org/releases/3.3/clang+llvm-3.3-amd64-Ubuntu-12.04.2.tar.gz"
        CRYSTAL_URL="https://s3.amazonaws.com/crystal-lang/crystal-linux64-latest.gz"
        ;;

      x86|i386|i686)
        LLVM_URL="http://llvm.org/releases/3.3/clang+llvm-3.3-i386-debian6.tar.bz2"
        EXTRACT_FLAG="j"
        CRYSTAL_URL="https://s3.amazonaws.com/crystal-lang/crystal-linux32-latest.gz"
        ;;

      *)
        echo "Unsupported Linux architecture ($HW_NAME)"
        exit 1
    esac
    ;;

  *)
    echo "Unsuported system ($OS_NAME)"
    exit 1
esac

function downloadCompiler {
  echo "Downloading Crystal compiler"
  curl "$CRYSTAL_URL" | gzip -d > "$DEPS_DIR/crystal"
  chmod +x "$DEPS_DIR/crystal"
}

function setup {
  rm -rf "$DEPS_DIR"
  mkdir -p "$DEPS_DIR"

  echo "Downloading precompiled LLVM 3.3 + Clang"
  mkdir "$DEPS_DIR/llvm"
  curl "$LLVM_URL" | tar x$EXTRACT_FLAG --strip-components=1 -C "$DEPS_DIR/llvm"

  downloadCompiler
}

case "$1" in
  "--setup")
    setup
    exit 0
    ;;
  "--update")
    downloadCompiler
    exit 0
    ;;
esac

# Make sure deps dir exists
if [ ! -d  "$DEPS_DIR" ]; then
  echo "Compiler environment is not set. Please run again with '--setup'"
  exit 1
fi

export PATH="$DEPS_DIR/llvm/bin":$PATH
export CRYSTAL_PATH="$SCRIPT_ROOT/src:libs"
exec "$CRYSTAL_DIR/crystal" "$@"
