require "spec"
require "digest/halfsiphash"

private VECTORS_HSIP64 = [
  UInt8.static_array(0x21, 0x8d, 0x1f, 0x59, 0xb9, 0xb8, 0x3c, 0xc8),
  UInt8.static_array(0xbe, 0x55, 0x24, 0x12, 0xf8, 0x38, 0x73, 0x15),
  UInt8.static_array(0x06, 0x4f, 0x39, 0xef, 0x7c, 0x50, 0xeb, 0x57),
  UInt8.static_array(0xce, 0x0f, 0x1a, 0x45, 0xf7, 0x06, 0x06, 0x79),
  UInt8.static_array(0xd5, 0xe7, 0x8a, 0x17, 0x5b, 0xe5, 0x2e, 0xa1),
  UInt8.static_array(0xcb, 0x9d, 0x7c, 0x3f, 0x2f, 0x3d, 0xb5, 0x80),
  UInt8.static_array(0xce, 0x3e, 0x91, 0x35, 0x8a, 0xa2, 0xbc, 0x25),
  UInt8.static_array(0xff, 0x20, 0x27, 0x28, 0xb0, 0x7b, 0xc6, 0x84),
  UInt8.static_array(0xed, 0xfe, 0xe8, 0x20, 0xbc, 0xe4, 0x85, 0x8c),
  UInt8.static_array(0x5b, 0x51, 0xcc, 0xcc, 0x13, 0x88, 0x83, 0x07),
  UInt8.static_array(0x95, 0xb0, 0x46, 0x9f, 0x06, 0xa6, 0xf2, 0xee),
  UInt8.static_array(0xae, 0x26, 0x33, 0x39, 0x94, 0xdd, 0xcd, 0x48),
  UInt8.static_array(0x7b, 0xc7, 0x1f, 0x9f, 0xae, 0xf5, 0xc7, 0x99),
  UInt8.static_array(0x5a, 0x23, 0x52, 0xd7, 0x5a, 0x0c, 0x37, 0x44),
  UInt8.static_array(0x3b, 0xb1, 0xa8, 0x70, 0xea, 0xe8, 0xe6, 0x58),
  UInt8.static_array(0x21, 0x7d, 0x0b, 0xcb, 0x4e, 0x81, 0xc9, 0x02),
  UInt8.static_array(0x73, 0x36, 0xaa, 0xd2, 0x5f, 0x7b, 0xf3, 0xb5),
  UInt8.static_array(0x37, 0xad, 0xc0, 0x64, 0x1c, 0x4c, 0x4f, 0x6a),
  UInt8.static_array(0xc9, 0xb2, 0xdb, 0x2b, 0x9a, 0x3e, 0x42, 0xf9),
  UInt8.static_array(0xf9, 0x10, 0xe4, 0x80, 0x20, 0xab, 0x36, 0x3c),
  UInt8.static_array(0x1b, 0xf5, 0x2b, 0x0a, 0x6f, 0xee, 0xa7, 0xdb),
  UInt8.static_array(0x00, 0x74, 0x1d, 0xc2, 0x69, 0xe8, 0xb3, 0xef),
  UInt8.static_array(0xe2, 0x01, 0x03, 0xfa, 0x1b, 0xa7, 0x76, 0xef),
  UInt8.static_array(0x4c, 0x22, 0x10, 0xe5, 0x4b, 0x68, 0x1d, 0x73),
  UInt8.static_array(0x70, 0x74, 0x10, 0x45, 0xae, 0x3f, 0xa6, 0xf1),
  UInt8.static_array(0x0c, 0x86, 0x40, 0x37, 0x39, 0x71, 0x40, 0x38),
  UInt8.static_array(0x0d, 0x89, 0x9e, 0xd8, 0x11, 0x29, 0x23, 0xf0),
  UInt8.static_array(0x22, 0x6b, 0xf5, 0xfa, 0xb8, 0x1e, 0xe1, 0xb8),
  UInt8.static_array(0x2d, 0x92, 0x5f, 0xfb, 0x1e, 0x00, 0x16, 0xb5),
  UInt8.static_array(0x36, 0x19, 0x58, 0xd5, 0x2c, 0xee, 0x10, 0xf1),
  UInt8.static_array(0x29, 0x1a, 0xaf, 0x86, 0x48, 0x98, 0x17, 0x9d),
  UInt8.static_array(0x86, 0x3c, 0x7f, 0x15, 0x5c, 0x34, 0x11, 0x7c),
  UInt8.static_array(0x28, 0x70, 0x9d, 0x46, 0xd8, 0x11, 0x62, 0x6c),
  UInt8.static_array(0x24, 0x84, 0x77, 0x68, 0x1d, 0x28, 0xf8, 0x9c),
  UInt8.static_array(0x83, 0x24, 0xe4, 0xd7, 0x52, 0x8f, 0x98, 0x30),
  UInt8.static_array(0xf9, 0xef, 0xd4, 0xe1, 0x3a, 0xea, 0x6b, 0xd8),
  UInt8.static_array(0x86, 0xd6, 0x7a, 0x40, 0xec, 0x42, 0x76, 0xdc),
  UInt8.static_array(0x3f, 0x62, 0x92, 0xec, 0xcc, 0xa9, 0x7e, 0x35),
  UInt8.static_array(0xcb, 0xd9, 0x2e, 0xe7, 0x24, 0xd4, 0x21, 0x09),
  UInt8.static_array(0x36, 0x8d, 0xf6, 0x80, 0x8d, 0x40, 0x3d, 0x79),
  UInt8.static_array(0x5b, 0x38, 0xc8, 0x1c, 0x67, 0xc8, 0xae, 0x4c),
  UInt8.static_array(0x95, 0xab, 0x71, 0x89, 0xd4, 0x39, 0xac, 0xb3),
  UInt8.static_array(0xa9, 0x1a, 0x52, 0xc0, 0x25, 0x32, 0x70, 0x24),
  UInt8.static_array(0x5b, 0x00, 0x87, 0xc6, 0x95, 0x28, 0xac, 0xea),
  UInt8.static_array(0x1e, 0x30, 0xf3, 0xad, 0x27, 0xdc, 0xb1, 0x5a),
  UInt8.static_array(0x69, 0x7f, 0x5c, 0x9a, 0x90, 0x32, 0x4e, 0xd4),
  UInt8.static_array(0x49, 0x5c, 0x0f, 0x99, 0x55, 0x57, 0xdc, 0x38),
  UInt8.static_array(0x94, 0x27, 0x20, 0x2a, 0x3c, 0x29, 0xf9, 0x4d),
  UInt8.static_array(0xa9, 0xea, 0xa8, 0xc0, 0x4b, 0xa9, 0x3e, 0x3e),
  UInt8.static_array(0xee, 0xa4, 0xc1, 0x73, 0x7d, 0x01, 0x12, 0x18),
  UInt8.static_array(0x91, 0x2d, 0x56, 0x8f, 0xd8, 0xf6, 0x5a, 0x49),
  UInt8.static_array(0x56, 0x91, 0x95, 0x96, 0xb0, 0xff, 0x5c, 0x97),
  UInt8.static_array(0x02, 0x44, 0x5a, 0x79, 0x98, 0xf5, 0x50, 0xe1),
  UInt8.static_array(0x86, 0xec, 0x46, 0x6c, 0xe7, 0x1d, 0x1f, 0xb2),
  UInt8.static_array(0x35, 0x95, 0x69, 0xe7, 0xd2, 0x89, 0xe3, 0xbc),
  UInt8.static_array(0x87, 0x1b, 0x05, 0xca, 0x62, 0xbb, 0x7c, 0x96),
  UInt8.static_array(0xa1, 0xa4, 0x92, 0xf9, 0x42, 0xf1, 0x5f, 0x1d),
  UInt8.static_array(0x12, 0xec, 0x26, 0x7f, 0xf6, 0x09, 0x5b, 0x6e),
  UInt8.static_array(0x5d, 0x1b, 0x5e, 0xa1, 0xb2, 0x31, 0xd8, 0x9d),
  UInt8.static_array(0xd8, 0xcf, 0xb4, 0x45, 0x3f, 0x92, 0xee, 0x54),
  UInt8.static_array(0xd6, 0x76, 0x28, 0x90, 0xbf, 0x26, 0xe4, 0x60),
  UInt8.static_array(0x31, 0x35, 0x63, 0xa4, 0xb7, 0xed, 0x5c, 0xf3),
  UInt8.static_array(0xf9, 0x0b, 0x3a, 0xb5, 0x72, 0xd4, 0x66, 0x93),
  UInt8.static_array(0x2e, 0xa6, 0x3c, 0x71, 0xbf, 0x32, 0x60, 0x87),
]

describe Digest::HalfSipHash(2, 4) do
  key = UInt8.static_array(0, 1, 2, 3, 4, 5, 6, 7)

  it "generates official halfsiphash2-4 32-bit test vectors" do
    input = uninitialized UInt8[64]
    output = uninitialized UInt8[8]

    64.times do |i|
      input[i] = i.to_u8

      hasher = Digest::HalfSipHash(2, 4).new(key)
      hasher.update(input.to_slice[0, i])
      hasher.result(output.to_slice)

      output.should eq(VECTORS_HSIP64[i])
    end
  end

  it "generates 32-bit hash in chunks" do
    input = StaticArray(UInt8, 64).new { |i| i.to_u8 }
    expected = uninitialized UInt8[8]
    got = uninitialized UInt8[8]

    hasher = Digest::HalfSipHash(2, 4).new(key)
    hasher.update(input.to_slice)
    hasher.result(expected.to_slice)

    h = Digest::HalfSipHash(2, 4).new(key)
    h.update(input.to_slice[0, 2])   # buffer 2 bytes
    h.update(input.to_slice[2, 6])   # complete to 4 bytes + buffer 2 bytes
    h.update(input.to_slice[8, 1])   # buffer 1 more byte
    h.update(input.to_slice[9, 1])   # complete to 4 bytes + buffer 0 bytes
    h.update(input.to_slice[10, 54]) # push the rest
    h.result(got.to_slice)

    got.should eq(expected)
  end

  it "returns a 32-bit hash" do
    hasher = Digest::HalfSipHash(2, 4).new(key)
    hasher.update("fixed data")
    typeof(hasher.result).should eq(UInt64)
    hasher.result.should eq(13596912907759364473_u64)
  end
end
