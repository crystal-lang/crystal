require "spec"
require "digest/halfsiphash"

private VECTORS_HSIP32 = [
  UInt8.static_array(0xa9, 0x35, 0x9f, 0x5b),
  UInt8.static_array(0x27, 0x47, 0x5a, 0xb8),
  UInt8.static_array(0xfa, 0x62, 0xa6, 0x03),
  UInt8.static_array(0x8a, 0xfe, 0xe7, 0x04),
  UInt8.static_array(0x2a, 0x6e, 0x46, 0x89),
  UInt8.static_array(0xc5, 0xfa, 0xb6, 0x69),
  UInt8.static_array(0x58, 0x63, 0xfc, 0x23),
  UInt8.static_array(0x8b, 0xcf, 0x63, 0xc5),
  UInt8.static_array(0xd0, 0xb8, 0x84, 0x8f),
  UInt8.static_array(0xf8, 0x06, 0xe7, 0x79),
  UInt8.static_array(0x94, 0xb0, 0x79, 0x34),
  UInt8.static_array(0x08, 0x08, 0x30, 0x50),
  UInt8.static_array(0x57, 0xf0, 0x87, 0x2f),
  UInt8.static_array(0x77, 0xe6, 0x63, 0xff),
  UInt8.static_array(0xd6, 0xff, 0xf8, 0x7c),
  UInt8.static_array(0x74, 0xfe, 0x2b, 0x97),
  UInt8.static_array(0xd9, 0xb5, 0xac, 0x84),
  UInt8.static_array(0xc4, 0x74, 0x64, 0x5b),
  UInt8.static_array(0x46, 0x5b, 0x8d, 0x9b),
  UInt8.static_array(0x7b, 0xef, 0xe3, 0x87),
  UInt8.static_array(0xe3, 0x4d, 0x10, 0x45),
  UInt8.static_array(0x61, 0x3f, 0x62, 0xb3),
  UInt8.static_array(0x70, 0xf3, 0x67, 0xfe),
  UInt8.static_array(0xe6, 0xad, 0xb8, 0xbd),
  UInt8.static_array(0x27, 0x40, 0x0c, 0x63),
  UInt8.static_array(0x26, 0x78, 0x78, 0x75),
  UInt8.static_array(0x4f, 0x56, 0x7b, 0x5f),
  UInt8.static_array(0x3a, 0xb0, 0xe6, 0x69),
  UInt8.static_array(0xb0, 0x64, 0x40, 0x00),
  UInt8.static_array(0xff, 0x67, 0x0f, 0xb4),
  UInt8.static_array(0x50, 0x9e, 0x33, 0x8b),
  UInt8.static_array(0x5d, 0x58, 0x9f, 0x1a),
  UInt8.static_array(0xfe, 0xe7, 0x21, 0x12),
  UInt8.static_array(0x33, 0x75, 0x32, 0x59),
  UInt8.static_array(0x6a, 0x43, 0x4f, 0x8c),
  UInt8.static_array(0xfe, 0x28, 0xb7, 0x29),
  UInt8.static_array(0xe7, 0x5c, 0xc6, 0xec),
  UInt8.static_array(0x69, 0x7e, 0x8d, 0x54),
  UInt8.static_array(0x63, 0x68, 0x8b, 0x0f),
  UInt8.static_array(0x65, 0x0b, 0x62, 0xb4),
  UInt8.static_array(0xb6, 0xbc, 0x18, 0x40),
  UInt8.static_array(0x5d, 0x07, 0x45, 0x05),
  UInt8.static_array(0x24, 0x42, 0xfd, 0x2e),
  UInt8.static_array(0x7b, 0xb7, 0x86, 0x3a),
  UInt8.static_array(0x77, 0x05, 0xd5, 0x48),
  UInt8.static_array(0xd7, 0x52, 0x08, 0xb1),
  UInt8.static_array(0xb6, 0xd4, 0x99, 0xc8),
  UInt8.static_array(0x08, 0x92, 0x20, 0x2e),
  UInt8.static_array(0x69, 0xe1, 0x2c, 0xe3),
  UInt8.static_array(0x8d, 0xb5, 0x80, 0xe5),
  UInt8.static_array(0x36, 0x97, 0x64, 0xc6),
  UInt8.static_array(0x01, 0x6e, 0x02, 0x04),
  UInt8.static_array(0x3b, 0x85, 0xf3, 0xd4),
  UInt8.static_array(0xfe, 0xdb, 0x66, 0xbe),
  UInt8.static_array(0x1e, 0x69, 0x2a, 0x3a),
  UInt8.static_array(0xc6, 0x89, 0x84, 0xc0),
  UInt8.static_array(0xa5, 0xc5, 0xb9, 0x40),
  UInt8.static_array(0x9b, 0xe9, 0xe8, 0x8c),
  UInt8.static_array(0x7d, 0xbc, 0x81, 0x40),
  UInt8.static_array(0x7c, 0x07, 0x8e, 0xc5),
  UInt8.static_array(0xd4, 0xe7, 0x6c, 0x73),
  UInt8.static_array(0x42, 0x8f, 0xcb, 0xb9),
  UInt8.static_array(0xbd, 0x83, 0x99, 0x7a),
  UInt8.static_array(0x59, 0xea, 0x4a, 0x74),
]

describe Digest::HalfSipHash(2, 4) do
  key = UInt8.static_array(0, 1, 2, 3, 4, 5, 6, 7)

  it "generates official halfsiphash2-4 32-bit test vectors" do
    input = uninitialized UInt8[64]
    output = uninitialized UInt8[4]

    64.times do |i|
      input[i] = i.to_u8

      hasher = Digest::HalfSipHash(2, 4).new(key)
      hasher.update(input.to_slice[0, i])
      hasher.result(output.to_slice)

      output.should eq(VECTORS_HSIP32[i])
    end
  end

  it "generates 32-bit hash in chunks" do
    input = StaticArray(UInt8, 64).new { |i| i.to_u8 }
    expected = uninitialized UInt8[4]
    got = uninitialized UInt8[4]

    hasher = Digest::HalfSipHash(2, 4).new(key)
    hasher.update(input.to_slice)
    hasher.result(expected.to_slice)

    h = Digest::HalfSipHash(2, 4).new(key)
    h.update(input.to_slice[0, 2])   # buffer 2 bytes
    h.update(input.to_slice[2, 6])   # complete to 4 bytes + buffer 2 bytes
    h.update(input.to_slice[8, 1])   # buffer 1 more byte
    h.update(input.to_slice[9, 1])   # complete to 4 bytes + buffer 0 bytes
    h.update(input.to_slice[10, 54]) # push the rest
    h.result(got.to_slice)

    got.should eq(expected)
  end

  it "returns a 32-bit hash" do
    hasher = Digest::HalfSipHash(2, 4).new(key)
    hasher.update("fixed data")
    typeof(hasher.result).should eq(UInt32)
    hasher.result.should eq(1533225208_u32)
  end
end
