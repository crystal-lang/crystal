require "spec"
require "digest/siphash"

private VECTORS_SIP64 = [
  UInt8.static_array(0x31, 0x0e, 0x0e, 0xdd, 0x47, 0xdb, 0x6f, 0x72),
  UInt8.static_array(0xfd, 0x67, 0xdc, 0x93, 0xc5, 0x39, 0xf8, 0x74),
  UInt8.static_array(0x5a, 0x4f, 0xa9, 0xd9, 0x09, 0x80, 0x6c, 0x0d),
  UInt8.static_array(0x2d, 0x7e, 0xfb, 0xd7, 0x96, 0x66, 0x67, 0x85),
  UInt8.static_array(0xb7, 0x87, 0x71, 0x27, 0xe0, 0x94, 0x27, 0xcf),
  UInt8.static_array(0x8d, 0xa6, 0x99, 0xcd, 0x64, 0x55, 0x76, 0x18),
  UInt8.static_array(0xce, 0xe3, 0xfe, 0x58, 0x6e, 0x46, 0xc9, 0xcb),
  UInt8.static_array(0x37, 0xd1, 0x01, 0x8b, 0xf5, 0x00, 0x02, 0xab),
  UInt8.static_array(0x62, 0x24, 0x93, 0x9a, 0x79, 0xf5, 0xf5, 0x93),
  UInt8.static_array(0xb0, 0xe4, 0xa9, 0x0b, 0xdf, 0x82, 0x00, 0x9e),
  UInt8.static_array(0xf3, 0xb9, 0xdd, 0x94, 0xc5, 0xbb, 0x5d, 0x7a),
  UInt8.static_array(0xa7, 0xad, 0x6b, 0x22, 0x46, 0x2f, 0xb3, 0xf4),
  UInt8.static_array(0xfb, 0xe5, 0x0e, 0x86, 0xbc, 0x8f, 0x1e, 0x75),
  UInt8.static_array(0x90, 0x3d, 0x84, 0xc0, 0x27, 0x56, 0xea, 0x14),
  UInt8.static_array(0xee, 0xf2, 0x7a, 0x8e, 0x90, 0xca, 0x23, 0xf7),
  UInt8.static_array(0xe5, 0x45, 0xbe, 0x49, 0x61, 0xca, 0x29, 0xa1),
  UInt8.static_array(0xdb, 0x9b, 0xc2, 0x57, 0x7f, 0xcc, 0x2a, 0x3f),
  UInt8.static_array(0x94, 0x47, 0xbe, 0x2c, 0xf5, 0xe9, 0x9a, 0x69),
  UInt8.static_array(0x9c, 0xd3, 0x8d, 0x96, 0xf0, 0xb3, 0xc1, 0x4b),
  UInt8.static_array(0xbd, 0x61, 0x79, 0xa7, 0x1d, 0xc9, 0x6d, 0xbb),
  UInt8.static_array(0x98, 0xee, 0xa2, 0x1a, 0xf2, 0x5c, 0xd6, 0xbe),
  UInt8.static_array(0xc7, 0x67, 0x3b, 0x2e, 0xb0, 0xcb, 0xf2, 0xd0),
  UInt8.static_array(0x88, 0x3e, 0xa3, 0xe3, 0x95, 0x67, 0x53, 0x93),
  UInt8.static_array(0xc8, 0xce, 0x5c, 0xcd, 0x8c, 0x03, 0x0c, 0xa8),
  UInt8.static_array(0x94, 0xaf, 0x49, 0xf6, 0xc6, 0x50, 0xad, 0xb8),
  UInt8.static_array(0xea, 0xb8, 0x85, 0x8a, 0xde, 0x92, 0xe1, 0xbc),
  UInt8.static_array(0xf3, 0x15, 0xbb, 0x5b, 0xb8, 0x35, 0xd8, 0x17),
  UInt8.static_array(0xad, 0xcf, 0x6b, 0x07, 0x63, 0x61, 0x2e, 0x2f),
  UInt8.static_array(0xa5, 0xc9, 0x1d, 0xa7, 0xac, 0xaa, 0x4d, 0xde),
  UInt8.static_array(0x71, 0x65, 0x95, 0x87, 0x66, 0x50, 0xa2, 0xa6),
  UInt8.static_array(0x28, 0xef, 0x49, 0x5c, 0x53, 0xa3, 0x87, 0xad),
  UInt8.static_array(0x42, 0xc3, 0x41, 0xd8, 0xfa, 0x92, 0xd8, 0x32),
  UInt8.static_array(0xce, 0x7c, 0xf2, 0x72, 0x2f, 0x51, 0x27, 0x71),
  UInt8.static_array(0xe3, 0x78, 0x59, 0xf9, 0x46, 0x23, 0xf3, 0xa7),
  UInt8.static_array(0x38, 0x12, 0x05, 0xbb, 0x1a, 0xb0, 0xe0, 0x12),
  UInt8.static_array(0xae, 0x97, 0xa1, 0x0f, 0xd4, 0x34, 0xe0, 0x15),
  UInt8.static_array(0xb4, 0xa3, 0x15, 0x08, 0xbe, 0xff, 0x4d, 0x31),
  UInt8.static_array(0x81, 0x39, 0x62, 0x29, 0xf0, 0x90, 0x79, 0x02),
  UInt8.static_array(0x4d, 0x0c, 0xf4, 0x9e, 0xe5, 0xd4, 0xdc, 0xca),
  UInt8.static_array(0x5c, 0x73, 0x33, 0x6a, 0x76, 0xd8, 0xbf, 0x9a),
  UInt8.static_array(0xd0, 0xa7, 0x04, 0x53, 0x6b, 0xa9, 0x3e, 0x0e),
  UInt8.static_array(0x92, 0x59, 0x58, 0xfc, 0xd6, 0x42, 0x0c, 0xad),
  UInt8.static_array(0xa9, 0x15, 0xc2, 0x9b, 0xc8, 0x06, 0x73, 0x18),
  UInt8.static_array(0x95, 0x2b, 0x79, 0xf3, 0xbc, 0x0a, 0xa6, 0xd4),
  UInt8.static_array(0xf2, 0x1d, 0xf2, 0xe4, 0x1d, 0x45, 0x35, 0xf9),
  UInt8.static_array(0x87, 0x57, 0x75, 0x19, 0x04, 0x8f, 0x53, 0xa9),
  UInt8.static_array(0x10, 0xa5, 0x6c, 0xf5, 0xdf, 0xcd, 0x9a, 0xdb),
  UInt8.static_array(0xeb, 0x75, 0x09, 0x5c, 0xcd, 0x98, 0x6c, 0xd0),
  UInt8.static_array(0x51, 0xa9, 0xcb, 0x9e, 0xcb, 0xa3, 0x12, 0xe6),
  UInt8.static_array(0x96, 0xaf, 0xad, 0xfc, 0x2c, 0xe6, 0x66, 0xc7),
  UInt8.static_array(0x72, 0xfe, 0x52, 0x97, 0x5a, 0x43, 0x64, 0xee),
  UInt8.static_array(0x5a, 0x16, 0x45, 0xb2, 0x76, 0xd5, 0x92, 0xa1),
  UInt8.static_array(0xb2, 0x74, 0xcb, 0x8e, 0xbf, 0x87, 0x87, 0x0a),
  UInt8.static_array(0x6f, 0x9b, 0xb4, 0x20, 0x3d, 0xe7, 0xb3, 0x81),
  UInt8.static_array(0xea, 0xec, 0xb2, 0xa3, 0x0b, 0x22, 0xa8, 0x7f),
  UInt8.static_array(0x99, 0x24, 0xa4, 0x3c, 0xc1, 0x31, 0x57, 0x24),
  UInt8.static_array(0xbd, 0x83, 0x8d, 0x3a, 0xaf, 0xbf, 0x8d, 0xb7),
  UInt8.static_array(0x0b, 0x1a, 0x2a, 0x32, 0x65, 0xd5, 0x1a, 0xea),
  UInt8.static_array(0x13, 0x50, 0x79, 0xa3, 0x23, 0x1c, 0xe6, 0x60),
  UInt8.static_array(0x93, 0x2b, 0x28, 0x46, 0xe4, 0xd7, 0x06, 0x66),
  UInt8.static_array(0xe1, 0x91, 0x5f, 0x5c, 0xb1, 0xec, 0xa4, 0x6c),
  UInt8.static_array(0xf3, 0x25, 0x96, 0x5c, 0xa1, 0x6d, 0x62, 0x9f),
  UInt8.static_array(0x57, 0x5f, 0xf2, 0x8e, 0x60, 0x38, 0x1b, 0xe5),
  UInt8.static_array(0x72, 0x45, 0x06, 0xeb, 0x4c, 0x32, 0x8a, 0x95),
]

describe Digest::SipHash(2, 4) do
  key = UInt8.static_array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)

  it "generates official SipHash2-4 64-bit test vectors" do
    input = uninitialized UInt8[64]
    output = uninitialized UInt8[8]

    64.times do |i|
      input[i] = i.to_u8

      hasher = Digest::SipHash(2, 4).new(key)
      hasher.update(input.to_slice[0, i])
      hasher.result(output.to_slice)

      output.should eq(VECTORS_SIP64[i])
    end
  end

  it "generates 64-bit hash in chunks" do
    input = StaticArray(UInt8, 64).new { |i| i.to_u8 }
    expected = uninitialized UInt8[8]
    got = uninitialized UInt8[8]

    hasher = Digest::SipHash(2, 4).new(key)
    hasher.update(input.to_slice)
    hasher.result(expected.to_slice)

    h = Digest::SipHash(2, 4).new(key)
    h.update(input.to_slice[0, 4])   # buffer 4 bytes
    h.update(input.to_slice[4, 6])   # complete to 8 bytes + buffer 2 bytes
    h.update(input.to_slice[10, 4])  # buffer 4 more bytes
    h.update(input.to_slice[14, 2])  # complete to 8 bytes + buffer 0 bytes
    h.update(input.to_slice[16, 48]) # push the rest
    h.result(got.to_slice)

    got.should eq(expected)
  end

  it "returns a 64-bit hash" do
    hasher = Digest::SipHash(2, 4).new(key)
    hasher.update("fixed data")
    typeof(hasher.result).should eq(UInt64)
    hasher.result.should eq(8888851257339431073_u64)
  end
end
