require "random/mt19937"

# `Random` provides an interface for random values generation, using a pseudo random number generator (PRNG).
#
# ```
# Random.new_seed # => 112705036
# Random.rand     # => 0.167595
# Random.rand(5)  # => 2
# ```
#
# The above methods delegate to a `Random` instance.
#
# ```
# r = Random.new
# r.rand      # => 0.0372991
# r.next_bool # => true
# r.next_int  # => 2223112
# ```
#
# This module also defines a global method `#rand`, which `Array#sample` and `Array#shuffle` delegates.
#
# ```
# rand     # => 0.293829
# rand(10) # => 8
# ```
module Random
  DEFAULT = MT19937.new

  # Returns a `UInt32` read from a counter value
  # generated by the cycle counter register.
  def self.new_seed : UInt32
    Intrinsics.read_cycle_counter.to_u32
  end

  # Initiates an instance with the given *seed*. (Default: `#new_seed`)
  def self.new(seed = new_seed)
    MT19937.new(seed)
  end

  # Generates a random `UInt32`.
  abstract def next_u32

  # Generates a random `Bool`.
  #
  # ```
  # Random.new.next_bool # => true
  # ```
  def next_bool : Bool
    next_u32.even?
  end

  # Generates a random `Int32`.
  #
  # ```
  # Random.new.next_int # => 440038499
  # Random.new.next_int # => -1848788484
  # ```
  def next_int : Int32
    next_u32.to_i32
  end

  # see `#rand`
  def next_float : Float64
    # Divided by 2^32-1
    next_u32 * (1.0/4294967295.0)
  end

  # Generates a random `Float64` between 0 and 1.
  #
  # ```
  # r = Random.new
  # r.rand # => 0.167595
  # r.rand # => 0.0372991
  # ```
  def rand : Float64
    next_float
  end

  # Returns a random `Int32` which is greater than 0 and less than *max*.
  #
  # ```
  # Random.new.rand(10)   # => 5
  # Random.new.rand(5000) # => 2243
  # ```
  def rand(max : Int) : Int32
    if max > 0
      (next_u32 % max).to_i32
    else
      raise ArgumentError.new "incorrect rand value: #{max}"
    end
  end

  # Returns a random `Float64` which is greater than or equal to 0 and less than *max*.
  #
  # ```
  # Random.new.rand(3.5)    # => 2.88938
  # Random.new.rand(10.725) # => 7.70147
  # ```
  def rand(max : Float) : Float64
    if max > 0
      next_u32 * (1 / (UInt32::MAX.to_f64 + 1)) * max
    else
      raise ArgumentError.new "incorrect rand value: #{max}"
    end
  end

  # Returns a random `Int32` in the given *range*.
  #
  # ```
  # Random.new.rand(10..20) # => 14
  # ```
  def rand(range : Range(Int, Int)) : Int32
    span = range.end - range.begin
    span += 1 unless range.excludes_end?
    if span > 0
      range.begin + rand(span)
    else
      raise ArgumentError.new "incorrect rand value: #{range}"
    end
  end

  # Returns a random `Float64` in the given *range*.
  #
  # ```
  # Random.new.rand(6.2..21.768) # => 15.2989
  # ```
  def rand(range : Range(Float, Float)) : Float64
    span = range.end - range.begin
    if span > 0 || !range.excludes_end?
      range.begin + (range.excludes_end? ? rand(span) : rand * span)
    else
      raise ArgumentError.new "incorrect rand value: #{range}"
    end
  end

  # see `#rand`
  def self.rand : Float64
    DEFAULT.rand
  end

  # see `#rand(x)`
  def self.rand(x)
    DEFAULT.rand(x)
  end
end

# see `Random#rand`
def rand
  Random.rand
end

# see `Random#rand(x)`
def rand(x)
  Random.rand(x)
end
