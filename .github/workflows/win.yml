name: Windows CI

on: [push, pull_request]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  x86_64-windows:
    runs-on: windows-2022
    steps:
      - name: Disable CRLF line ending substitution
        run: |
          git config --global core.autocrlf false
      - name: Enable Developer Command Prompt
        uses: ilammy/msvc-dev-cmd@cec98b9d092141f74527d0afa6feb2af698cfe89 # v1.12.1

      - name: Install Crystal
        uses: crystal-lang/install-crystal@v1
        with:
          crystal: "1.8.0"

      - name: Download Crystal source
        uses: actions/checkout@v3

      - name: Cache libraries
        id: cache-libs
        uses: actions/cache@v3
        with:
          path: | # openssl and llvm take much longer to build so they are cached separately
            libs/pcre.lib
            libs/pcre2-8.lib
            libs/iconv.lib
            libs/gc.lib
            libs/ffi.lib
            libs/z.lib
            libs/mpir.lib
            libs/yaml.lib
            libs/xml2.lib
          key: win-libs-${{ hashFiles('.github/workflows/win.yml') }}-msvc-${{ env.VSCMD_VER }}
      - name: Download libgc
        if: steps.cache-libs.outputs.cache-hit != 'true'
        uses: actions/checkout@v3
        with:
          repository: ivmai/bdwgc
          ref: v8.2.2
          path: bdwgc
      - name: Download libatomic_ops
        if: steps.cache-libs.outputs.cache-hit != 'true'
        uses: actions/checkout@v3
        with:
          repository: ivmai/libatomic_ops
          ref: v7.6.14
          path: bdwgc/libatomic_ops
      - name: Build libgc
        if: steps.cache-libs.outputs.cache-hit != 'true'
        working-directory: ./bdwgc
        run: |
          cmake . -DBUILD_SHARED_LIBS=OFF -Denable_large_config=ON -DCMAKE_POLICY_DEFAULT_CMP0091=NEW -DCMAKE_MSVC_RUNTIME_LIBRARY=MultiThreaded -DCMAKE_FIND_USE_SYSTEM_ENVIRONMENT_PATH=OFF
          cmake --build . --config Release
      - name: Download libpcre
        if: steps.cache-libs.outputs.cache-hit != 'true'
        run: |
          iwr https://cs.stanford.edu/pub/exim/pcre/pcre-8.45.zip -OutFile pcre.zip
          (Get-FileHash -Algorithm SHA256 .\pcre.zip).hash -eq "5b709aa45ea3b8bb73052947200ad187f651a2049158fb5bbfed329e4322a977"
          7z x pcre.zip
          mv pcre-* pcre
      - name: Build libpcre
        if: steps.cache-libs.outputs.cache-hit != 'true'
        working-directory: ./pcre
        run: |
          cmake . -DBUILD_SHARED_LIBS=OFF -DPCRE_SUPPORT_UNICODE_PROPERTIES=ON -DPCRE_SUPPORT_JIT=ON -DPCRE_STATIC_RUNTIME=ON -DCMAKE_FIND_USE_SYSTEM_ENVIRONMENT_PATH=OFF
          cmake --build . --config Release
      - name: Download libpcre2
        if: steps.cache-libs.outputs.cache-hit != 'true'
        uses: actions/checkout@v3
        with:
          repository: PCRE2Project/pcre2
          ref: pcre2-10.42
          path: pcre2
      - name: Build libpcre2
        if: steps.cache-libs.outputs.cache-hit != 'true'
        working-directory: ./pcre2
        run: |
          cmake . -DBUILD_STATIC_LIBS=ON -DBUILD_SHARED_LIBS=OFF -DPCRE2_STATIC_RUNTIME=ON -DPCRE2_BUILD_PCRE2GREP=OFF -DPCRE2_BUILD_TESTS=OFF -DPCRE2_SUPPORT_UNICODE=ON -DPCRE2_SUPPORT_JIT=ON -DCMAKE_FIND_USE_SYSTEM_ENVIRONMENT_PATH=OFF
          cmake --build . --config Release
      - name: Download libiconv
        if: steps.cache-libs.outputs.cache-hit != 'true'
        uses: actions/checkout@v3
        with:
          repository: pffang/libiconv-for-Windows
          ref: 1353455a6c4e15c9db6865fd9c2bf7203b59c0ec # master@{2022-10-11}
          path: libiconv
      - name: Build libiconv
        if: steps.cache-libs.outputs.cache-hit != 'true'
        working-directory: ./libiconv
        run: |
          sed -i 's|__declspec (dllimport) ||' libiconv\include\iconv.h

          echo '<Project>
            <PropertyGroup>
              <ForceImportAfterCppTargets>$(MsbuildThisFileDirectory)\Override.props</ForceImportAfterCppTargets>
            </PropertyGroup>
          </Project>' > 'Directory.Build.props'

          echo '<Project>
            <ItemDefinitionGroup>
              <ClCompile>
                <RuntimeLibrary>MultiThreaded</RuntimeLibrary>
                <DebugInformationFormat>None</DebugInformationFormat>
                <WholeProgramOptimization>false</WholeProgramOptimization>
              </ClCompile>
            </ItemDefinitionGroup>
          </Project>' > 'Override.props'

          MSBuild.exe /p:Platform=x64 /p:Configuration=ReleaseStatic libiconv.vcxproj
      - name: Download libffi
        if: steps.cache-libs.outputs.cache-hit != 'true'
        uses: actions/checkout@v3
        with:
          repository: winlibs/libffi
          ref: libffi-3.3
          path: libffi
      - name: Build libffi
        if: steps.cache-libs.outputs.cache-hit != 'true'
        working-directory: ./libffi
        run: |
          echo '<Project>
            <PropertyGroup>
              <ForceImportAfterCppTargets>$(MsbuildThisFileDirectory)\Override.props</ForceImportAfterCppTargets>
            </PropertyGroup>
          </Project>' > 'Directory.Build.props'

          echo '<Project>
            <ItemDefinitionGroup Label="Configuration">
              <ClCompile>
                <RuntimeLibrary>MultiThreaded</RuntimeLibrary>
                <DebugInformationFormat>None</DebugInformationFormat>
                <WholeProgramOptimization>false</WholeProgramOptimization>
              </ClCompile>
              <Link>
                <GenerateDebugInformation>false</GenerateDebugInformation>
              </Link>
            </ItemDefinitionGroup>
          </Project>' > 'Override.props'

          MSBuild.exe /p:PlatformToolset=v143 /p:Platform=x64 /p:Configuration=Release win32\vs16_x64\libffi-msvc.sln -target:libffi:Rebuild
      - name: Download zlib
        if: steps.cache-libs.outputs.cache-hit != 'true'
        run: |
          iwr https://github.com/madler/zlib/archive/v1.2.13.zip -OutFile zlib.zip
          (Get-FileHash -Algorithm SHA256 .\zlib.zip).hash -eq "C2856951BBF30E30861ACE3765595D86BA13F2CF01279D901F6C62258C57F4FF"
          7z x zlib.zip
          mv zlib-* zlib
      - name: Build zlib
        if: steps.cache-libs.outputs.cache-hit != 'true'
        working-directory: ./zlib
        run: |
          cmake . -DCMAKE_POLICY_DEFAULT_CMP0091=NEW -DCMAKE_MSVC_RUNTIME_LIBRARY=MultiThreaded -DCMAKE_FIND_USE_SYSTEM_ENVIRONMENT_PATH=OFF
          cmake --build . --config Release
      - name: Download mpir
        if: steps.cache-libs.outputs.cache-hit != 'true'
        uses: actions/checkout@v3
        with:
          repository: BrianGladman/mpir
          ref: 28d01062f62de1218d511c4574da4006f92be3bd  # master@{2022-10-12}
          path: mpir
      - name: Build mpir
        if: steps.cache-libs.outputs.cache-hit != 'true'
        working-directory: ./mpir
        run: |
          $VsVersion = "vs$((& "${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vswhere.exe" -property displayName) -replace '.*\b\d\d(\d\d)\b.*', '$1')"

          echo '<Project>
            <PropertyGroup>
              <ForceImportAfterCppTargets>$(MsbuildThisFileDirectory)\Override.props</ForceImportAfterCppTargets>
            </PropertyGroup>
          </Project>' > 'msvc\Directory.Build.props'

          echo '<Project>
            <ItemDefinitionGroup Label="Configuration">
              <ClCompile>
                <DebugInformationFormat>None</DebugInformationFormat>
                <WholeProgramOptimization>false</WholeProgramOptimization>
              </ClCompile>
            </ItemDefinitionGroup>
          </Project>' > 'msvc\Override.props'

          MSBuild.exe /p:Platform=x64 /p:Configuration=Release /p:DefineConstants=MSC_BUILD_DLL ".\msvc\$VsVersion\lib_mpir_gc\lib_mpir_gc.vcxproj"
      - name: Download libyaml
        if: steps.cache-libs.outputs.cache-hit != 'true'
        run: |
          iwr https://github.com/yaml/libyaml/archive/0.2.5.zip -OutFile libyaml.zip
          (Get-FileHash -Algorithm SHA256 .\libyaml.zip).hash -eq "14605BAA6DFC0C4D3AB943A46A627413C0388736E453B67FE4E90C9683C8CBC8"
          7z x libyaml.zip
          mv libyaml-* libyaml
      - name: Build libyaml
        if: steps.cache-libs.outputs.cache-hit != 'true'
        working-directory: ./libyaml
        run: |
          cmake . -DCMAKE_POLICY_DEFAULT_CMP0091=NEW -DCMAKE_MSVC_RUNTIME_LIBRARY=MultiThreaded -DCMAKE_FIND_USE_SYSTEM_ENVIRONMENT_PATH=OFF
          cmake --build . --config Release
      - name: Download libxml2
        if: steps.cache-libs.outputs.cache-hit != 'true'
        uses: actions/checkout@v3
        with:
          repository: GNOME/libxml2
          ref: f507d167f1755b7eaea09fb1a44d29aab828b6d1  # v2.10.3
          path: libxml2
      - name: Build libxml2
        if: steps.cache-libs.outputs.cache-hit != 'true'
        working-directory: ./libxml2
        run: |
          cmake . -DBUILD_SHARED_LIBS=OFF -DLIBXML2_WITH_PROGRAMS=OFF -DLIBXML2_WITH_HTTP=OFF -DLIBXML2_WITH_FTP=OFF -DLIBXML2_WITH_TESTS=OFF -DCMAKE_POLICY_DEFAULT_CMP0091=NEW -DCMAKE_MSVC_RUNTIME_LIBRARY=MultiThreaded -DCMAKE_FIND_USE_SYSTEM_ENVIRONMENT_PATH=OFF -DLIBXML2_WITH_ICONV=OFF -DLIBXML2_WITH_LZMA=OFF -DLIBXML2_WITH_PYTHON=OFF -DLIBXML2_WITH_ZLIB=OFF

          echo '<Project>
            <PropertyGroup>
              <ForceImportAfterCppTargets>$(MsbuildThisFileDirectory)\Override.props</ForceImportAfterCppTargets>
            </PropertyGroup>
          </Project>' > 'Directory.Build.props'

          echo '<Project>
            <ItemDefinitionGroup>
              <ClCompile>
                <PreprocessorDefinitions>LIBXML_STATIC;%(PreprocessorDefinitions)</PreprocessorDefinitions>
              </ClCompile>
            </ItemDefinitionGroup>
          </Project>' > 'Override.props'

          cmake --build . --config Release
      - name: Gather libraries
        if: steps.cache-libs.outputs.cache-hit != 'true'
        run: |
          mkdir libs
          mv pcre/Release/pcre.lib libs/
          mv pcre2/Release/pcre2-8-static.lib libs/pcre2-8.lib
          mv libiconv/output/x64/ReleaseStatic/libiconvStatic.lib libs/iconv.lib
          mv bdwgc/Release/gc.lib libs/
          mv libffi/win32/vs16_x64/x64/Release/libffi.lib libs/ffi.lib
          mv zlib/Release/zlibstatic.lib libs/z.lib
          mv mpir/lib/x64/Release/mpir.lib libs/
          mv libyaml/Release/yaml.lib libs/
          mv libxml2/Release/libxml2s.lib libs/xml2.lib

      - name: Cache OpenSSL
        id: cache-openssl
        uses: actions/cache@v3
        with:
          path: |
            libs/crypto.lib
            libs/ssl.lib
            libs/openssl_VERSION
          key: win-openssl-libs-3.0.7-msvc-${{ env.VSCMD_VER }}
      - name: Set up NASM
        if: steps.cache-openssl.outputs.cache-hit != 'true'
        uses: ilammy/setup-nasm@321e6ed62a1fc77024a3bd853deb33645e8b22c4 # v1.4.0
      - name: Download OpenSSL
        if: steps.cache-openssl.outputs.cache-hit != 'true'
        run: |
          iwr https://www.openssl.org/source/openssl-3.0.7.tar.gz -OutFile openssl.tar.gz
          (Get-FileHash -Algorithm SHA256 .\openssl.tar.gz).hash -eq "83049d042a260e696f62406ac5c08bf706fd84383f945cf21bd61e9ed95c396e"
          7z x openssl.tar.gz
          7z x openssl.tar
          mv openssl-* openssl
      - name: Build OpenSSL
        if: steps.cache-openssl.outputs.cache-hit != 'true'
        working-directory: ./openssl
        run: |
          sed -i 's|/Zi /Fd.*\.pdb||' Configurations/10-main.conf
          sed -i 's|/debug|/debug:none|' Configurations/10-main.conf
          perl Configure VC-WIN64A /MT -static no-tests --with-zlib-lib=..\zlib\Release --with-zlib-include=..\zlib
          nmake
      - name: Gather OpenSSL
        if: steps.cache-openssl.outputs.cache-hit != 'true'
        run: |
          cp openssl/libcrypto.lib libs/crypto.lib
          cp openssl/libssl.lib libs/ssl.lib
          [IO.File]::WriteAllLines("libs/openssl_VERSION", "3.0.7")

      - name: Cache LLVM
        id: cache-llvm
        uses: actions/cache@v3
        with:
          path: llvm
          key: llvm-libs-15.0.7-msvc-${{ env.VSCMD_VER }}
      - name: Download LLVM
        if: steps.cache-llvm.outputs.cache-hit != 'true'
        run: |
          iwr https://github.com/llvm/llvm-project/releases/download/llvmorg-15.0.7/llvm-15.0.7.src.tar.xz -OutFile llvm.tar.xz
          (Get-FileHash -Algorithm SHA256 .\llvm.tar.xz).hash -eq "4AD8B2CC8003C86D0078D15D987D84E3A739F24AAE9033865C027ABAE93EE7A4"
          7z x llvm.tar.xz
          7z x llvm.tar
          mv llvm-* llvm-src
      - name: Download LLVM's CMake files
        if: steps.cache-llvm.outputs.cache-hit != 'true'
        run: |
          iwr https://github.com/llvm/llvm-project/releases/download/llvmorg-15.0.7/cmake-15.0.7.src.tar.xz -OutFile cmake.tar.xz
          (Get-FileHash -Algorithm SHA256 .\cmake.tar.xz).hash -eq "8986f29b634fdaa9862eedda78513969fe9788301c9f2d938f4c10a3e7a3e7ea"
          7z x cmake.tar.xz
          7z x cmake.tar
          mv cmake-* cmake
      - name: Patch LLVM for VS 2019 16.7.0
        working-directory: ./llvm-src
        if: steps.cache-llvm.outputs.cache-hit != 'true'
        run: |
          sed -i 's/#ifdef HAVE_STD_IS_TRIVIALLY_COPYABLE/#if 0/' include/llvm/Support/type_traits.h
      - name: Build LLVM
        if: steps.cache-llvm.outputs.cache-hit != 'true'
        working-directory: ./llvm-src
        run: |
          cmake . -Thost=x64 -DLLVM_TARGETS_TO_BUILD="X86;AArch64" -DLLVM_USE_CRT_RELEASE=MT -DBUILD_SHARED_LIBS=OFF -DCMAKE_FIND_USE_SYSTEM_ENVIRONMENT_PATH=OFF -DLLVM_BUILD_BENCHMARKS=OFF -DLLVM_INCLUDE_BENCHMARKS=OFF -DLLVM_ENABLE_ZSTD=OFF
          cmake --build . --config Release
      - name: Gather LLVM
        if: steps.cache-llvm.outputs.cache-hit != 'true'
        run: |
          mv llvm-src/Release llvm
          mv llvm-src/include llvm/

      - name: Set up environment
        run: |
          echo "CRYSTAL_LIBRARY_PATH=$(pwd)\libs" >> ${env:GITHUB_ENV}
          echo "CRYSTAL_SPEC_COMPILER_BIN=$(pwd)\.build\crystal.exe" >> ${env:GITHUB_ENV}
          echo "LLVM_CONFIG=$(pwd)\llvm\bin\llvm-config.exe" >> ${env:GITHUB_ENV}

      - name: Build LLVM extensions
        run: make -f Makefile.win deps

      - name: Build Crystal
        run: |
          bin/crystal.bat env
          make -f Makefile.win -B

      - name: Download shards release
        uses: actions/checkout@v3
        with:
          repository: crystal-lang/shards
          ref: v0.17.3
          path: shards

      - name: Download molinillo release
        uses: actions/checkout@v3
        with:
          repository: crystal-lang/crystal-molinillo
          ref: v0.2.0
          path: shards/lib/molinillo

      - name: Build shards release
        working-directory: ./shards
        run: ../bin/crystal.bat build src/shards.cr

      - name: Gather Crystal binaries
        run: |
          mkdir crystal/src
          mkdir crystal/lib
          cp .build/crystal.exe crystal/
          cp shards/shards.exe crystal/
          cp libs/* crystal/lib/
          cp src/* crystal/src -Recurse
          rm crystal/src/llvm/ext/llvm_ext.obj

      - name: Upload Crystal binaries
        uses: actions/upload-artifact@v3
        with:
          name: crystal
          path: crystal

      - name: Run stdlib specs
        run: make -f Makefile.win std_spec

      - name: Run compiler specs
        run: make -f Makefile.win compiler_spec

      - name: Run primitives specs
        run: make -f Makefile.win primitives_spec

      - name: Build samples
        run: make -f Makefile.win samples
