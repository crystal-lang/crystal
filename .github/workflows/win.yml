name: Windows CI

on: [push, pull_request]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/master' }}

jobs:
  x86_64-windows:
    runs-on: windows-2022
    steps:
      - name: Disable CRLF line ending substitution
        run: |
          git config --global core.autocrlf false
      - name: Enable Developer Command Prompt
        uses: ilammy/msvc-dev-cmd@cec98b9d092141f74527d0afa6feb2af698cfe89 # v1.12.1

      - name: Install Crystal
        uses: crystal-lang/install-crystal@v1
        with:
          crystal: "1.8.2"

      - name: Download Crystal source
        uses: actions/checkout@v3

      - name: Cache libraries
        id: cache-libs
        uses: actions/cache@v3
        with:
          path: | # openssl and llvm take much longer to build so they are cached separately
            libs/pcre.lib
            libs/pcre2-8.lib
            libs/iconv.lib
            libs/gc.lib
            libs/ffi.lib
            libs/z.lib
            libs/mpir.lib
            libs/yaml.lib
            libs/xml2.lib
          key: win-libs-${{ hashFiles('.github/workflows/win.yml', 'etc/win-ci/*.ps1') }}-msvc-${{ env.VSCMD_VER }}
      - name: Build libgc
        if: steps.cache-libs.outputs.cache-hit != 'true'
        run: .\etc\win-ci\build-gc.ps1 -BuildTree deps\gc -Version 8.2.2 -AtomicOpsVersion 7.8.0
      - name: Build libpcre
        if: steps.cache-libs.outputs.cache-hit != 'true'
        run: .\etc\win-ci\build-pcre.ps1 -BuildTree deps\pcre -Version 8.45
      - name: Build libpcre2
        if: steps.cache-libs.outputs.cache-hit != 'true'
        run: .\etc\win-ci\build-pcre2.ps1 -BuildTree deps\pcre2 -Version 10.42
      - name: Build libiconv
        if: steps.cache-libs.outputs.cache-hit != 'true'
        run: .\etc\win-ci\build-iconv.ps1 -BuildTree deps\iconv
      - name: Build libffi
        if: steps.cache-libs.outputs.cache-hit != 'true'
        run: .\etc\win-ci\build-ffi.ps1 -BuildTree deps\ffi -Version 3.3
      - name: Build zlib
        if: steps.cache-libs.outputs.cache-hit != 'true'
        run: .\etc\win-ci\build-z.ps1 -BuildTree deps\z -Version 1.2.13
      - name: Build mpir
        if: steps.cache-libs.outputs.cache-hit != 'true'
        run: .\etc\win-ci\build-mpir.ps1 -BuildTree deps\mpir
      - name: Build libyaml
        if: steps.cache-libs.outputs.cache-hit != 'true'
        run: .\etc\win-ci\build-yaml.ps1 -BuildTree deps\yaml -Version 0.2.5
      - name: Build libxml2
        if: steps.cache-libs.outputs.cache-hit != 'true'
        run: .\etc\win-ci\build-xml2.ps1 -BuildTree deps\xml2 -Version 2.11.3

      - name: Cache OpenSSL
        id: cache-openssl
        uses: actions/cache@v3
        with:
          path: |
            libs/crypto.lib
            libs/ssl.lib
            libs/openssl_VERSION
          key: win-openssl-libs-3.1.0-${{ hashFiles('etc/win-ci/build-openssl.ps1') }}-msvc-${{ env.VSCMD_VER }}
      - name: Set up NASM
        if: steps.cache-openssl.outputs.cache-hit != 'true'
        uses: ilammy/setup-nasm@321e6ed62a1fc77024a3bd853deb33645e8b22c4 # v1.4.0
      - name: Build OpenSSL
        if: steps.cache-openssl.outputs.cache-hit != 'true'
        run: .\etc\win-ci\build-openssl.ps1 -BuildTree deps\openssl -Version 3.1.0

      - name: Cache LLVM
        id: cache-llvm
        uses: actions/cache@v3
        with:
          path: llvm
          key: llvm-libs-16.0.3-msvc-${{ env.VSCMD_VER }}
      - name: Download LLVM
        if: steps.cache-llvm.outputs.cache-hit != 'true'
        run: |
          iwr https://github.com/llvm/llvm-project/releases/download/llvmorg-16.0.3/llvm-16.0.3.src.tar.xz -OutFile llvm.tar.xz
          (Get-FileHash -Algorithm SHA256 .\llvm.tar.xz).hash -eq "D820E63BC3A6F4F833EC69A1EF49A2E81992E90BC23989F98946914B061AB6C7"
          7z x llvm.tar.xz
          7z x llvm.tar
          mv llvm-* llvm-src
      - name: Download LLVM's CMake files
        if: steps.cache-llvm.outputs.cache-hit != 'true'
        run: |
          iwr https://github.com/llvm/llvm-project/releases/download/llvmorg-16.0.3/cmake-16.0.3.src.tar.xz -OutFile cmake.tar.xz
          (Get-FileHash -Algorithm SHA256 .\cmake.tar.xz).hash -eq "B6D83C91F12757030D8361DEDC5DD84357B3EDB8DA406B5D0850DF8B6F7798B1"
          7z x cmake.tar.xz
          7z x cmake.tar
          mv cmake-* cmake
      - name: Build LLVM
        if: steps.cache-llvm.outputs.cache-hit != 'true'
        working-directory: ./llvm-src
        run: |
          cmake . -Thost=x64 -DLLVM_TARGETS_TO_BUILD="X86;AArch64" -DLLVM_USE_CRT_RELEASE=MT -DBUILD_SHARED_LIBS=OFF -DCMAKE_FIND_USE_SYSTEM_ENVIRONMENT_PATH=OFF -DLLVM_INCLUDE_BENCHMARKS=OFF -DLLVM_INCLUDE_TESTS=OFF -DLLVM_ENABLE_ZSTD=OFF
          cmake --build . --config Release
      - name: Gather LLVM
        if: steps.cache-llvm.outputs.cache-hit != 'true'
        run: |
          mv llvm-src/Release llvm
          mv llvm-src/include llvm/

      - name: Set up environment
        run: |
          echo "CRYSTAL_LIBRARY_PATH=$(pwd)\libs" >> ${env:GITHUB_ENV}
          echo "CRYSTAL_SPEC_COMPILER_BIN=$(pwd)\.build\crystal.exe" >> ${env:GITHUB_ENV}
          echo "LLVM_CONFIG=$(pwd)\llvm\bin\llvm-config.exe" >> ${env:GITHUB_ENV}

      - name: Build LLVM extensions
        run: make -f Makefile.win deps

      - name: Build Crystal
        run: |
          bin/crystal.bat env
          make -f Makefile.win -B

      - name: Download shards release
        uses: actions/checkout@v3
        with:
          repository: crystal-lang/shards
          ref: v0.17.3
          path: shards

      - name: Download molinillo release
        uses: actions/checkout@v3
        with:
          repository: crystal-lang/crystal-molinillo
          ref: v0.2.0
          path: shards/lib/molinillo

      - name: Build shards release
        working-directory: ./shards
        run: ../bin/crystal.bat build src/shards.cr

      - name: Gather Crystal binaries
        run: |
          mkdir crystal/src
          mkdir crystal/lib
          cp .build/crystal.exe crystal/
          cp shards/shards.exe crystal/
          cp libs/* crystal/lib/
          cp src/* crystal/src -Recurse
          rm crystal/src/llvm/ext/llvm_ext.obj

      - name: Upload Crystal binaries
        uses: actions/upload-artifact@v3
        with:
          name: crystal
          path: crystal

      - name: Run stdlib specs
        run: make -f Makefile.win std_spec

      - name: Run compiler specs
        run: make -f Makefile.win compiler_spec

      - name: Run primitives specs
        run: make -f Makefile.win primitives_spec

      - name: Build samples
        run: make -f Makefile.win samples
